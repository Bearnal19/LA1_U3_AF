
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author
 */
public class VPrincipal extends javax.swing.JFrame {
    boolean bAFD,bAFN,contiene;
    String a,EI;
    Automata automata;
    String [] edos,EF,alfabeto;
    String [][] transiciones;
    DefaultTableModel modeloTT;
    int contador = 1,posR,posC;
    boolean limpiarinfo,modificarinfo,insertarinfo,crearautomata,validarcad,determinista,nodeterminista;
    VDiagrama diagrama;
    /**
     * Creates new form VPrincipal
     */
    public VPrincipal() {
        initComponents();
        
        try{
            setIconImage(new ImageIcon(getClass().getResource("logoAF.png")).getImage());
        }catch(Exception e){
            
        }
        
        this.setLocation(100,50);
        this.setTitle("Validador de cadenas - Autómatas Finitos");
        
        bAFD=false;
        bAFN=false;
        modeloTT=(DefaultTableModel)jTable1.getModel();
        txtEdos.requestFocus();
        insertarinfo=limpiarinfo=true;
        modificarinfo=crearautomata=validarcad=false;
        activarInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblEdos = new javax.swing.JLabel();
        txtEdos = new javax.swing.JTextField();
        txtEI = new javax.swing.JTextField();
        txtEF = new javax.swing.JTextField();
        txtAlf = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        lblEI = new javax.swing.JLabel();
        lblEF = new javax.swing.JLabel();
        lblAlf = new javax.swing.JLabel();
        lblTipo = new javax.swing.JLabel();
        txtCadena = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnCrear = new javax.swing.JLabel();
        lblTransiciones = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setLayout(null);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AFD1.png"))); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel3);
        jLabel3.setBounds(350, 70, 210, 40);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AFN1.png"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel4);
        jLabel4.setBounds(580, 70, 210, 40);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/estados.png"))); // NOI18N
        jPanel1.add(jLabel5);
        jLabel5.setBounds(90, 110, 60, 50);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/estadoinicial.png"))); // NOI18N
        jPanel1.add(jLabel6);
        jLabel6.setBounds(630, 110, 60, 60);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/estadosfinales.png"))); // NOI18N
        jPanel1.add(jLabel7);
        jLabel7.setBounds(90, 180, 50, 50);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/alfabeto.png"))); // NOI18N
        jPanel1.add(jLabel8);
        jLabel8.setBounds(630, 170, 51, 50);

        jLabel9.setFont(new java.awt.Font("Roboto Condensed", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 153, 153));
        jLabel9.setText("•Los estados deben seguir el siguiente formato: a-z(0-9)+ y deben ir separados por coma");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(660, 0, 440, 30);

        lblEdos.setForeground(new java.awt.Color(255, 51, 51));
        jPanel1.add(lblEdos);
        lblEdos.setBounds(50, 160, 540, 20);

        txtEdos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEdosKeyPressed(evt);
            }
        });
        jPanel1.add(txtEdos);
        txtEdos.setBounds(150, 130, 320, 30);

        txtEI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEIKeyTyped(evt);
            }
        });
        jPanel1.add(txtEI);
        txtEI.setBounds(690, 120, 290, 30);

        txtEF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEFKeyPressed(evt);
            }
        });
        jPanel1.add(txtEF);
        txtEF.setBounds(150, 190, 320, 30);

        txtAlf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAlfActionPerformed(evt);
            }
        });
        txtAlf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAlfKeyPressed(evt);
            }
        });
        jPanel1.add(txtAlf);
        txtAlf.setBounds(690, 180, 290, 30);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/insertarinformacion1.png"))); // NOI18N
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel12MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel12MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel12MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel12MouseReleased(evt);
            }
        });
        jPanel1.add(jLabel12);
        jLabel12.setBounds(290, 240, 160, 50);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(50, 330, 500, 160);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/limpiarinformacion1.png"))); // NOI18N
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel15MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel15MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel15MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel15MouseReleased(evt);
            }
        });
        jPanel1.add(jLabel15);
        jLabel15.setBounds(620, 240, 150, 50);

        lblEI.setForeground(new java.awt.Color(255, 51, 51));
        jPanel1.add(lblEI);
        lblEI.setBounds(590, 150, 470, 20);

        lblEF.setForeground(new java.awt.Color(255, 51, 51));
        jPanel1.add(lblEF);
        lblEF.setBounds(50, 220, 510, 20);

        lblAlf.setForeground(new java.awt.Color(255, 51, 51));
        jPanel1.add(lblAlf);
        lblAlf.setBounds(590, 210, 390, 20);

        lblTipo.setForeground(new java.awt.Color(255, 51, 51));
        jPanel1.add(lblTipo);
        lblTipo.setBounds(470, 50, 220, 20);
        jPanel1.add(txtCadena);
        txtCadena.setBounds(700, 330, 320, 30);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cadena.png"))); // NOI18N
        jPanel1.add(jLabel11);
        jLabel11.setBounds(640, 320, 51, 60);

        btnCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crear1.png"))); // NOI18N
        btnCrear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCrearMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCrearMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCrearMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCrearMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnCrearMouseReleased(evt);
            }
        });
        jPanel1.add(btnCrear);
        btnCrear.setBounds(50, 500, 140, 70);

        lblTransiciones.setForeground(new java.awt.Color(255, 51, 51));
        jPanel1.add(lblTransiciones);
        lblTransiciones.setBounds(50, 620, 420, 20);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/validar1.png"))); // NOI18N
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel14MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel14MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel14MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel14MouseReleased(evt);
            }
        });
        jPanel1.add(jLabel14);
        jLabel14.setBounds(880, 370, 140, 70);
        jPanel1.add(jLabel16);
        jLabel16.setBounds(570, 440, 500, 60);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modificarinfo1.png"))); // NOI18N
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel17MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel17MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel17MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel17MouseReleased(evt);
            }
        });
        jPanel1.add(jLabel17);
        jLabel17.setBounds(450, 240, 170, 50);

        jLabel10.setFont(new java.awt.Font("Roboto Condensed", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Tipo de Autómata");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(480, 20, 180, 30);

        jLabel13.setFont(new java.awt.Font("Roboto Condensed", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("Inserta transiciones:");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(50, 290, 210, 30);

        jLabel22.setFont(new java.awt.Font("Roboto Condensed", 1, 10)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 102, 102));
        jLabel22.setText("-Solo da click una celda para cambiar-");
        jPanel1.add(jLabel22);
        jLabel22.setBounds(400, 300, 149, 30);

        jLabel23.setFont(new java.awt.Font("Roboto Condensed", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(153, 153, 153));
        jLabel23.setText("•Los elementos deben seguir el siguiente formato a-z y deben ir separados por coma");
        jPanel1.add(jLabel23);
        jLabel23.setBounds(680, 20, 420, 30);

        jLabel2.setFont(new java.awt.Font("Roboto Condensed Light", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 153, 255));
        jLabel2.setText("ACERCA DE");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel2);
        jLabel2.setBounds(950, 540, 110, 24);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fondo2.jpg"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 1100, 580);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1098, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        if(bAFD==false){
            bAFD=true;
            bAFN=false;
            jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFD2.png")));
            jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFN1.png")));
            lblTipo.setText("");
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        if(bAFN==false){
            bAFN=true;
            bAFD=false;
            jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFD1.png")));
            jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFN2.png")));
            lblTipo.setText("");
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel12MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseReleased
        
    }//GEN-LAST:event_jLabel12MouseReleased

    private void jLabel12MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MousePressed
       
    }//GEN-LAST:event_jLabel12MousePressed

    private void jLabel12MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseExited
       
    }//GEN-LAST:event_jLabel12MouseExited

    private void jLabel12MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseEntered
        
    }//GEN-LAST:event_jLabel12MouseEntered

    private void jLabel15MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseEntered
      
        
    }//GEN-LAST:event_jLabel15MouseEntered

    private void jLabel15MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseExited
       
    }//GEN-LAST:event_jLabel15MouseExited

    private void jLabel15MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MousePressed
        
    }//GEN-LAST:event_jLabel15MousePressed

    private void jLabel15MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseReleased
   
    }//GEN-LAST:event_jLabel15MouseReleased

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        if(limpiarinfo){
            txtEdos.setText("");
            txtEI.setText("");
            txtEF.setText("");
            txtAlf.setText("");
        }
    }//GEN-LAST:event_jLabel15MouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        if(insertarinfo){
            if(validar()){
                bloquearInfo();

                EI = txtEI.getText();
                crearTabla();

                if(bAFD){
                    llenarTabla();
                }else{
                    jTable1.setEnabled(true);
                }
            }
        }
        
    }//GEN-LAST:event_jLabel12MouseClicked

    private void txtEdosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEdosKeyPressed
        lblEdos.setText("");
    }//GEN-LAST:event_txtEdosKeyPressed

    private void txtEIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEIKeyTyped
        lblEI.setText("");
    }//GEN-LAST:event_txtEIKeyTyped

    private void txtEFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEFKeyPressed
        lblEF.setText("");
    }//GEN-LAST:event_txtEFKeyPressed

    private void txtAlfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAlfKeyPressed
        lblAlf.setText("");
    }//GEN-LAST:event_txtAlfKeyPressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.rowAtPoint(evt.getPoint());
        int col = jTable1.columnAtPoint(evt.getPoint());
        lblTransiciones.setText("");
                
        if (col == 0) {
            JOptionPane.showMessageDialog(this, "no se puede modificar");
        }
        
        if(bAFD){
            if(contador==edos.length){contador=0;}
                modeloTT.setValueAt(edos[contador], row, col);
                contador++;
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnCrearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearMouseClicked
        if(crearautomata){
            if(crearautomata){
                if(!validarTabla()){
                    lblTransiciones.setText("Las transiciones no son correctas, reescríbelas");
                    jTable1.requestFocus();
                }/*else{
                     generarAutomata();
                }*/
                activarValidacion();
                enviarDatos();
            }
        }
    }//GEN-LAST:event_btnCrearMouseClicked

    private void btnCrearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearMouseEntered
  
    }//GEN-LAST:event_btnCrearMouseEntered

    private void btnCrearMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearMouseExited

    }//GEN-LAST:event_btnCrearMouseExited

    private void btnCrearMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearMousePressed
 
    }//GEN-LAST:event_btnCrearMousePressed

    private void btnCrearMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearMouseReleased

    }//GEN-LAST:event_btnCrearMouseReleased

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        if(validarcad){
            if(bAFD){
                if(validaDet()==1){
                    jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("valida.png")));
                    //JOptionPane.showMessageDialog(this, "Cadena Valida");
                }else if(validaDet()==0){
                    jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("novalida.png")));
                    //JOptionPane.showMessageDialog(this, "Cadena NO valida");
                }else{
                    jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("nopertenece.png")));
                    //JOptionPane.showMessageDialog(this, "Cadena NO valida");
                }
            }else if(bAFN){
                posR=posC=-1; 
                String[] cadena = txtCadena.getText().split("");
                int resultado = EvaluaEdo(EI,0,cadena); 
                if(resultado==1){
                    jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("valida.png")));
                    //JOptionPane.showMessageDialog(this, "Cadena Valida");
                }else if (resultado == 0){
                     jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("novalida.png")));
                    //JOptionPane.showMessageDialog(this, "Cadena NO valida");
                }
            }
        }
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel17MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseEntered
       
    }//GEN-LAST:event_jLabel17MouseEntered

    private void jLabel17MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseExited
        
    }//GEN-LAST:event_jLabel17MouseExited

    private void jLabel17MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MousePressed
        
    }//GEN-LAST:event_jLabel17MousePressed

    private void jLabel17MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseReleased
        
    }//GEN-LAST:event_jLabel17MouseReleased

    private void jLabel14MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseEntered
        
    }//GEN-LAST:event_jLabel14MouseEntered

    private void jLabel14MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseExited
       
    }//GEN-LAST:event_jLabel14MouseExited

    private void jLabel14MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MousePressed
       
    }//GEN-LAST:event_jLabel14MousePressed

    private void jLabel14MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseReleased
       
    }//GEN-LAST:event_jLabel14MouseReleased

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        if(modificarinfo){
            activarInfo();
        }
    }//GEN-LAST:event_jLabel17MouseClicked

    private void txtAlfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAlfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAlfActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        new AcercaDe().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel2MouseClicked
    public void enviarDatos(){
        transiciones=new String[jTable1.getRowCount()][jTable1.getColumnCount()-1];
                for(int i=0;i<transiciones.length;i++){
                    for(int j=0;j<transiciones[0].length;j++){
                        transiciones[i][j]=jTable1.getValueAt(i, j+1).toString();
                    }
                }
        diagrama=new VDiagrama(this,false);
        diagrama.vprincipal=this;
        diagrama.recibeDatos(alfabeto,edos,EF,transiciones,bAFD);
        diagrama.setVisible(true);        
    }
    
    public int EvaluaEdo(String Edo,int pos,String[] cad){
        int m = pos;
        if(m == cad.length){
            for(int b=0;b<EF.length;b++){
                if(Edo.equals(EF[b]))
                    return 1;
            }
            return 0;
        }
        obtenerPos(cad,pos,Edo);
        if(posR==-1)
            return 0;   
        String[] edosC = jTable1.getValueAt(posR, posC).toString().split(",");
        if(edosC[0].equals(""))
            return 0;
        m++;
        for(int i = 0; i <edosC.length;i++){
            if(EvaluaEdo(edosC[i],m,cad)==1)
                return 1;
        }
                
        return 0;
    }
    
    public int validaDet(){
        posR=-1;posC=-1;
        String estado="";
        
        if(txtCadena.getText().equals("")){
           for(int b=0;b<EF.length;b++){
            if(EI.equals(EF[b]))
                return 1;
            }
           return 0;
        }
        
        String[] cadena = txtCadena.getText().split("");
        
        int v;
        
        for(int r=0;r<cadena.length;r++){
            v=0;
            for(int s=0;s<alfabeto.length;s++){
                if(cadena[r].equals(alfabeto[s]))
                   v=1; 
            }
            if(v==0){
                return 2;
            }
        }
        
        obtenerPos(cadena,0,EI);
        
        estado = jTable1.getValueAt(posR, posC).toString();
        //comienza la validacion
        for(int i=1; i<cadena.length;i++){
            for(int j=1;j<=alfabeto.length;j++){
                if(cadena[i].equals(jTable1.getColumnName(j))){
                    obtenerPos(cadena,i,estado);
                    estado = jTable1.getValueAt(posR, posC).toString();
                    System.out.println(estado);
                }
            }
        }
        
        for(int b=0;b<EF.length;b++){
            if(estado.equals(EF[b]))
                return 1;
        }
        
        return 0;
    }
    
    public void obtenerPos(String[] cadena,int elemento,String edo){
        for(int i=0;i<edos.length;i++){
            if(jTable1.getValueAt(i,0).toString().equals(edo))
                posR=i;
        }System.out.println(posR+"");
               
        for(int i=0;i<=alfabeto.length;i++){
            if(jTable1.getColumnName(i).equals(cadena[elemento]))
                posC=i;
        }System.out.println(posC+"");
        
        if(cadena[0].equals("")){
            posR = -1;
            posC = -1;
        }
    }
    
    
    public void generarAutomata(){
        automata = new Automata();
        automata.insertarNodo(EI); 
        for(int i=0;i<edos.length;i++)
            automata.insertarNodo(edos[i]);
        for(int i=0;i<edos.length;i++){
            transicionesDet(i);
        }
    }
    
    public void transicionesDet(int i){
        for(int valor=1;valor<=alfabeto.length;valor++)
            automata.insertarArista(jTable1.getValueAt(i,0).toString(), jTable1.getValueAt(i,valor).toString(),jTable1.getColumnName(valor));
    
    }
    public void crearTabla(){
        //Reinicia la tabla a cero
            int numCol=modeloTT.getColumnCount();
            if(numCol>0){
                int c=0;
                jTable1.setModel(new DefaultTableModel());
            }
            modeloTT=(DefaultTableModel)jTable1.getModel();
            modeloTT.addColumn("Estados\\Alfabeto");
            for(int i=0;i<alfabeto.length;i++){
                modeloTT.addColumn(alfabeto[i]);
                
            }
            
            //Genera la tabla
            String [][] temporal=new String[edos.length][alfabeto.length+1];
            for(int i=0;i<edos.length;i++){
                for(int j=0;j<=alfabeto.length;j++){
                    if(j==0){
                        temporal[i][j]=edos[i];
                    }else{
                        temporal[i][j]="";
                    }
                }
                modeloTT.addRow(temporal[i]);
            }
    }
    
    public void llenarTabla(){
        jTable1.enable(false);
        for(int i=0;i<edos.length;i++){
            for(int j=1;j<alfabeto.length+1;j++){
                modeloTT.setValueAt(edos[0], i, j);
            }
        }
    }
    
    public boolean validarTabla(){
        for(int i=0;i<edos.length;i++){
            for(int j=1;j<=alfabeto.length;j++){
                if(jTable1.getValueAt(i,j).toString().matches(".*[,]{2,}.*")){
                    return false;
                }else if(jTable1.getValueAt(i,j).toString().matches("[,]$")){
                    return false;
                }else if(jTable1.getValueAt(i,j).toString().matches(".*[,]$")){
                    return false;
                }else{
                    String []edosCelda=jTable1.getValueAt(i,j).toString().split(",");
                    int c=0;
                    for (int k=0;k<edosCelda.length;k++) {
                        for (int l=0;l<edosCelda.length;l++) {
                            if (edosCelda[k].equals(edosCelda[l])){
                                c++;
                            }    
                        }
                        if(c>=2){
                            return false;
                        }
                        c=0;
                    }
                    if(edosCelda.length>edos.length){
                        return false;
                    }
                    boolean pertenece=false;
                    for (int m=0;m<edosCelda.length;m++) {
                        for (int n=0;n<edos.length;n++) {
                            if (edosCelda[m].equals(edos[n])||edosCelda[m].equals("")){
                                pertenece=true;
                                break;
                            }else{
                                pertenece=false;
                            }
                        }
                        if(pertenece==false){
                            return false;
                        }
                    } 
                }
            }
        }
        return true;
    }
    
    public boolean validar(){
        //Validar que se haya elegido un tipo de autómata
        if(bAFN==false && bAFD==false){
            lblTipo.setText("Seleccione el tipo de automata");
            return false;
        }
        
        //Valida que el campo estados no esté vacío
        if(txtEdos.getText().equals("")){
            lblEdos.setText("Introduce al menos un estado.");
            txtEdos.requestFocus();
            return false;
        }else{
            lblEdos.setText("");
            //Valida las comas del campo Estados
            if(txtEdos.getText().matches(".*[,]{2,}.*")){
                //Si existen dos comas juntas es incorrecto
                lblEdos.setText("No pueden ir dos o más comas juntas. Debe seguir [Ejem: q1,q2,q3]");
                txtEdos.requestFocus();
                return false;
            }else{
                //No puede haber sólo una coma en el campo Estados
                if(txtEdos.getText().matches("[,]$")){
                    lblEdos.setText("No puede ir sólo una coma.  Debe seguir [Ejem: q1,q2,q3]");
                    txtEdos.requestFocus();
                    return false;
                }
                //Validar que no termine con coma
                if(txtEdos.getText().matches(".*[,]$")){
                    lblEdos.setText("No puede ir una coma al final.  Debe seguir [Ejem: q1,q2,q3]");
                    txtEdos.requestFocus();
                    return false;
                }
                //No existen dos comas o más juntas, pero ahora falta validar que los edos. sean valores
                //alfanumericos y no repetidos
                edos=txtEdos.getText().split(",");
                int c=0;
                //Evalua si cada estado es alfanumerico
                for(int i=0;i<edos.length;i++){
                    if(!edos[i].matches("[a-z][0-9]+")){
                        //Manda error porque se encontró un estado no alfanumerico
                        lblEdos.setText("El formato es incorrecto. Debe de tener el formato a-z(0-9)+");
                        txtEdos.requestFocus();
                        return false;
                    }
                }
                //Aqui se valida que no haya estados repetidos
                for (int i=0;i<edos.length;i++) {
                    for (int j=0;j<edos.length;j++) {
                        if (edos[i].equals(edos[j])){
                            c++;
                        }    
                    }
                    if(c>=2){
                        //En cuanto se encuentre un estado repetido manda el error y rompe el for
                        lblEdos.setText("Hay algún estado repetido");
                        txtEdos.requestFocus();
                        return false;
                    }
                    c=0;
                }
            }
        }
        
        //Valida que el campo estado inicial no esté vacio
        if(txtEI.getText().equals("")){
            lblEI.setText("Falta introducir estado inicial");
            txtEI.requestFocus();
            return false;
        }else{
            lblEI.setText("");
            //Valida que el estado inicial contenga sólo caracteres alfanuméricos
            if(!txtEI.getText().matches("[a-z][0-9]+")){
                lblEI.setText("Incorrecto. Debe de tener el formato a-z(0-9)+");
                txtEI.requestFocus();
                return false;
            }else{
                boolean pertenece=false;
                //Valida si el estado inicial está dentro de los estados introducidos
                for(int i=0;i<edos.length;i++){
                    if(txtEI.getText().equals(edos[i])){
                        //Si el edo. inicial es igual a alguno de los estados introducidos
                        //la variable booleana cambiará a true y esto quiere decir que si pertenece
                        pertenece=true;
                    }
                }
                if(!pertenece){
                    //Como pertenece es falso quiere decir que no es igual a ninguno de los edos por lo tanto es inválido
                    lblEI.setText("El estado inicial declarado, no pertenece a los estados declarados como validos");
                    txtEI.requestFocus();
                    return false;
                }
                    
            }
        }
        
        //Valida que el campo estados finales no esté vacío
        if(txtEF.getText().equals("")){
            lblEF.setText("Introduce al menos un estado final");
            txtEF.requestFocus();
            return false;
        }else{
            lblEF.setText("");
            //Valida las comas del campo Estados finales
            if(txtEF.getText().matches(".*[,]{2,}.*")){
                //Si existen dos comas juntas es incorrecto
                lblEF.setText("No pueden ir dos o más comas juntas. Debe seguir [Ejem: q1,q2,q3]");
                txtEF.requestFocus();
                return false;
            }else{
                //No puede haber sólo una coma en el campo Estados
                if(txtEF.getText().matches("[,]$")){
                    lblEF.setText("No puede ir sólo una coma. Debe seguir [Ejem: q1,q2,q3]");
                    txtEF.requestFocus();
                    return false;
                }
                //Validar que no termine con coma
                if(txtEF.getText().matches(".*[,]$")){
                    lblEF.setText("No puede ir una coma al final. Debe seguir [Ejem: q1,q2,q3]");
                    txtEF.requestFocus();
                    return false;
                }
                //No existen dos comas o más juntas, pero ahora falta validar que los edos. sean valores
                //alfanumericos, no repetidos y de menor o igual cantidad que estados.
                EF=txtEF.getText().split(",");
                int numedos=EF.length,c=0;
                EI = txtEI.getText();
                //Evalua si cada estado es alfanumerico
                for(int i=0;i<numedos;i++){
                    if(!EF[i].matches("[a-z][0-9]+")){
                        //Manda error porque se encontró un estado no alfanumerico
                        lblEF.setText("Incorrecto. Debe de tener el formato a-z(0-9)+");
                        txtEF.requestFocus();
                        return false;
                    }
                }
                if(EF.length>edos.length){
                    lblEF.setText("Hay más estados finales que los existentes.");
                    return false;
                }
                for (int i=0;i<numedos;i++) {
                    for (int j=0;j<numedos;j++) {
                        if (EF[i].equals(EF[j])){
                            c++;
                        }    
                    }
                    if(c>=2){
                        //En cuanto se encuentre un estado repetido manda el error y rompe el for
                        lblEF.setText("Introduce cada estado solo una vez");
                        txtEF.requestFocus();
                        return false;
                    }
                    c=0;
                }
                //Aqui se valida que los estados finales pertenezcan a los estados
                boolean pertenece=false;
                for (int i=0;i<EF.length;i++) {
                    for (int j=0;j<edos.length;j++) {
                        if (EF[i].equals(edos[j])){
                            pertenece=true;
                            break;
                        }else{
                            pertenece=false;
                        }
                    }
                    if(pertenece==false){
                        //En cuanto se encuentre un estado repetido manda el error y rompe el for
                        lblEF.setText("Uno o más estados no pertenecen a los declarados como válidos");
                        txtEF.requestFocus();
                        return false;
                    }
                }
            }
            
        }
        
        //Valida que el campo alfabeto no esté vacío
        if(txtAlf.getText().equals("")){
            lblAlf.setText("Introduce el alfabeto. Debe de tener el formato a-z(0-9)+");
            txtAlf.requestFocus();
            return false;
        }else{
            lblAlf.setText("");
            //Validar las comas del campo alfabeto
            if(txtAlf.getText().matches(".*[,]{2,}.*")){
                //Si existen dos comas juntas es incorrecto
                lblAlf.setText("No pueden ir dos o más comas juntas. Debe seguir [Ejem: a,b,c]");
                txtAlf.requestFocus();
                return false;
            }else{
                //No puede haber sólo una coma en el campo Estados
                if(txtAlf.getText().matches("[,]$")){
                    lblAlf.setText("No puede ir sólo una coma. Debe seguir [Ejem: a,b,c]");
                    txtAlf.requestFocus();
                    return false;
                }
                //No existen dos comas o más juntas, pero ahora falta validar que los elementos 
                //sean sólo letras a-z
                alfabeto=txtAlf.getText().split(",");
                int c=0;
                //Evalua si cada estado es alfanumerico
                for(int i=0;i<alfabeto.length;i++){
                    if(!alfabeto[i].matches("[a-z]")){
                        //Manda error porque se encontró un estado no alfanumerico
                        lblAlf.setText("Los elementos del alfabeto solo pueden ser letras (a-z). Debe seguir [Ejem: a,b,c]");
                        txtAlf.requestFocus();
                        return false;
                    }
                }
                //Aqui se valida que no haya elementos del alfabeto repetidos
                for (int i=0;i<alfabeto.length;i++) {
                    for (int j=0;j<alfabeto.length;j++) {
                        if (alfabeto[i].equals(alfabeto[j])){
                            c++;
                        }    
                    }
                    if(c>=2){
                        //En cuanto se encuentre un estado repetido manda el error y rompe el for
                        lblAlf.setText("Introduce cada elemento solo una vez");
                        txtAlf.requestFocus();
                        return false;
                    }
                    c=0;
                } 
            }
            
        }
        
        return true;
    }
    
     public void bloquearInfo(){
        txtEdos.setEnabled(false);
        txtEI.setEnabled(false);
        txtEF.setEnabled(false);
        txtAlf.setEnabled(false);
        txtCadena.setEnabled(false);
        limpiarinfo=false;
        modificarinfo=true;
        insertarinfo=false;
        crearautomata=true;
        validarcad=false;
        determinista=false;
        nodeterminista=false;
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFD0.png")));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFN0.png")));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("insertarinformacion0.png")));
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("limpiarinformacion0.png")));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("validar0.png")));
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("modificarinfo1.png")));
        btnCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("crear1.png")));
    }
    
    public void activarInfo(){
        txtEdos.setEnabled(true);
        txtEI.setEnabled(true);
        txtEF.setEnabled(true);
        txtAlf.setEnabled(true);
        txtCadena.setEnabled(false);
        limpiarinfo=true;
        modificarinfo=false;
        insertarinfo=true;
        crearautomata=false;
        validarcad=false;
        determinista=true;
        nodeterminista=true;
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFD1.png")));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFN1.png")));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("insertarinformacion1.png")));
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("limpiarinformacion1.png")));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("validar0.png")));
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("modificarinfo0.png")));
        btnCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("crear0.png")));
    }
    
    public void bloquearTransiciones(){
        
    }
    
    public void activarTransiciones(){
        
    }
    
    public void bloquearValidacion(){
        
    }
    
    public void activarValidacion(){
        txtEdos.setEnabled(false);
        txtEI.setEnabled(false);
        txtEF.setEnabled(false);
        txtAlf.setEnabled(false);
        txtCadena.setEnabled(true);
        limpiarinfo=false;
        modificarinfo=true;
        insertarinfo=false;
        crearautomata=false;
        validarcad=true;
        determinista=false;
        nodeterminista=false;
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFD0.png")));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("AFN0.png")));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("insertarinformacion0.png")));
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("limpiarinformacion0.png")));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("validar1.png")));
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("modificarinfo1.png")));
        btnCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("crear0.png")));
    }
    
    
    
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnCrear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblAlf;
    private javax.swing.JLabel lblEF;
    private javax.swing.JLabel lblEI;
    private javax.swing.JLabel lblEdos;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JLabel lblTransiciones;
    private javax.swing.JTextField txtAlf;
    private javax.swing.JTextField txtCadena;
    private javax.swing.JTextField txtEF;
    private javax.swing.JTextField txtEI;
    private javax.swing.JTextField txtEdos;
    // End of variables declaration//GEN-END:variables
}
